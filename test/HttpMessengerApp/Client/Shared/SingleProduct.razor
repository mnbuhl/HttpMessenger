@using HttpMessenger.Service
@if (Product != null)
{
    <table>
        <tr>
            <td>Id:</td>
            <td>@Product.Id</td>
        </tr>
        <tr>
            <td>Name:</td>
            <td>@Product.Name</td>
        </tr>
        <tr>
            <td>Price:</td>
            <td>$@(Convert.ToDouble(Product.Price) / 100)</td>
        </tr>
        <tr>
            <td>Description:</td>
            <td>@Product.Description</td>
        </tr>
        <tr>
            <td>Created At:</td>
            <td>@Product.CreatedAt.ToShortDateString() @Product.CreatedAt.ToShortTimeString()</td>
        </tr>
        <tr>
            <td>Updated At:</td>
            <td>@Product.UpdatedAt.ToShortDateString() @Product.UpdatedAt.ToShortTimeString()</td>
        </tr>
    </table>
    <div class="product-table">
        <NavLink href="@("products/" + @Product.Id)">View</NavLink>
        <NavLink href="@("products/edit/" + @Product.Id)">Edit</NavLink>
        <EditForm Model="Product" OnSubmit="DeleteProduct">
            <button type="submit">Delete</button>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public ProductDto? Product { get; set; }
    
    [Inject]
    public IHttpMessenger? HttpMessenger { get; set; }
    
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    public async Task DeleteProduct()
    {
        if (HttpMessenger == null || Product == null || NavigationManager == null) return;
        
        var response = await HttpMessenger.Delete("products/" + Product.Id);
        
        if (response.Success)
            NavigationManager.NavigateTo("products");
    }

}